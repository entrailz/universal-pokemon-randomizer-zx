package com.dabomstew.pkrandom.worker;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.*;

import com.dabomstew.pkrandom.Settings;
import com.dabomstew.pkrandom.SettingsUpdater;
import com.dabomstew.pkrandom.Version;
import com.dabomstew.pkrandom.cli.randomStringGenerator;
import org.json.*;
import com.google.gson.*;

import static spark.Spark.*;

public class WorkerStart implements Runnable {

    ExecutorService executor = Executors.newFixedThreadPool(5);

    public static String printObject(Object object) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return gson.toJson(object);
    }

    private static Settings getSettingsFromString(String settingsString) throws UnsupportedEncodingException {
        int settingsStringVersionNumber = Integer.parseInt(settingsString.substring(0, 3));
        if (settingsStringVersionNumber < Version.VERSION) {
            String updatedSettingsString = new SettingsUpdater().update(settingsStringVersionNumber, settingsString.substring(3));
            return Settings.fromString(updatedSettingsString);
        }
        return  Settings.fromString(settingsString.substring(3));
    }

    private static String createSettingsFromString(String settingsString)
    {
        Settings settings = new Gson().fromJson(settingsString, Settings.class);
        return Version.VERSION + settings.toString();
    }

    public static int invoke(String[] args) {
        post("/settingsToJson", (request, response) -> {
            response.header("Content-Type", "application/json");
            if (request.queryParams("settings") != null && !request.queryParams("settings").isEmpty())
            {
                //BASE64 encoded string that is generated by the generator has been passed to the endpoint, parse it and get the settings from that.
                Settings settings = getSettingsFromString(request.queryParams("settings"));
                return printObject(settings);
            }
            else
            {
                response.status(500);
                return new JSONObject()
                        .put("status", "500")
                        .put("data", "No settings provided").toString();
            }
        });

        post("/settingsFromJson", (request, response) -> {
            response.header("Content-Type", "application/json");
            if (request.queryParams("jsonSettings") != null && !request.queryParams("jsonSettings").isEmpty())
            {
                //BASE64 encoded string that is generated by the generator has been passed to the endpoint, parse it and get the settings from that.
                String settings = createSettingsFromString(request.queryParams("jsonSettings"));
                return settings;
            }
            else
            {
                response.status(500);
                return new JSONObject()
                        .put("status", "500")
                        .put("data", "No settings provided").toString();
            }
        });

        WorkerStart worker = new WorkerStart();
        ScheduledExecutorService schedular = Executors.newScheduledThreadPool(1);
        schedular.scheduleAtFixedRate(worker, 0,30, TimeUnit.SECONDS);

        return 1;
    }

    @Override
    public void run() {
        try
        {
            int activeThreads = ((ThreadPoolExecutor) executor).getActiveCount();
            System.out.println(activeThreads);
            if (activeThreads < 5)
            {
                String outFileName = randomStringGenerator.generateString();
                Settings settings = getSettingsFromString("317AAUEAQEGABkATAAEAAEeRAAEFAAAFABABAIBAAAAAAAAAAAAMgQyAQAICTIGBAC8AAISTGVhZiBHcmVlbiAoVSkgMS4xjx1aI+PDOIo=");
                Runnable worker = new RandomizationWorker(settings, 1010101, "green.gba", outFileName, false, null, false);
                executor.execute(worker);
            }
        }
        catch (Exception ex)
        {
            System.out.println(ex.toString());
        }
    }
}
