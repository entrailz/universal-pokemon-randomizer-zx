package com.dabomstew.pkrandom.worker;

import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.util.Scanner;
import java.util.concurrent.*;

import com.dabomstew.pkrandom.Settings;
import com.dabomstew.pkrandom.SettingsUpdater;
import com.dabomstew.pkrandom.Utils.*;
import com.dabomstew.pkrandom.Version;
import com.dabomstew.pkrandom.cli.randomStringGenerator;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.json.*;
import com.google.gson.*;
import spark.utils.IOUtils;

import javax.swing.text.html.parser.Entity;

import static com.dabomstew.pkrandom.WebConstants.*;
import static spark.Spark.*;

public class WorkerStart implements Runnable {

    ExecutorService executor = Executors.newFixedThreadPool(5);

    public static String printObject(Object object) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return gson.toJson(object);
    }

    private static Settings getSettingsFromString(String settingsString) throws UnsupportedEncodingException {
        int settingsStringVersionNumber = Integer.parseInt(settingsString.substring(0, 3));
        if (settingsStringVersionNumber < Version.VERSION) {
            String updatedSettingsString = new SettingsUpdater().update(settingsStringVersionNumber, settingsString.substring(3));
            return Settings.fromString(updatedSettingsString);
        }
        return  Settings.fromString(settingsString.substring(3));
    }

    private static String createSettingsFromString(String settingsString)
    {
        Settings settings = new Gson().fromJson(settingsString, Settings.class);
        return Version.VERSION + settings.toString();
    }

    public static int invoke(String[] args) {
        post("/settingsToJson", (request, response) -> {
            response.header("Content-Type", "application/json");
            if (request.queryParams("settings") != null && !request.queryParams("settings").isEmpty())
            {
                //BASE64 encoded string that is generated by the generator has been passed to the endpoint, parse it and get the settings from that.
                Settings settings = getSettingsFromString(request.queryParams("settings"));
                return printObject(settings);
            }
            else
            {
                response.status(500);
                return new JSONObject()
                        .put("status", "500")
                        .put("data", "No settings provided").toString();
            }
        });

        post("/settingsFromJson", (request, response) -> {
            response.header("Content-Type", "application/json");
            if (request.queryParams("jsonSettings") != null && !request.queryParams("jsonSettings").isEmpty())
            {
                //BASE64 encoded string that is generated by the generator has been passed to the endpoint, parse it and get the settings from that.
                String settings = createSettingsFromString(request.queryParams("jsonSettings"));
                return settings;
            }
            else
            {
                response.status(500);
                return new JSONObject()
                        .put("status", "500")
                        .put("data", "No settings provided").toString();
            }
        });

        post("/createJob", (request, response) -> {
            try
            {
                response.header("Content-Type", "application/json");
                if ((request.queryParams("jsonSettings") != null && !request.queryParams("jsonSettings").isEmpty()) && (request.queryParams("seed") != null && !request.queryParams("seed").isEmpty()) && (request.queryParams("game") != null && !request.queryParams("game").isEmpty()))
                {
                    //BASE64 encoded string that is generated by the generator has been passed to the endpoint, parse it and get the settings from that.
                    String settings = createSettingsFromString(request.queryParams("jsonSettings"));
                    String generatedId = randomStringGenerator.generateString();

                    ApiRandomizations randomization = new ApiRandomizations();
                    Gson gson = new Gson();
                    randomization.generated_id = generatedId;
                    randomization.game = request.queryParams("game").split("\\.")[0];
                    randomization.settings = request.queryParams("jsonSettings");
                    randomization.seed = request.queryParams("seed");
                    randomization.file_name = request.queryParams("game");
                    if (request.queryParams("user") != null && !request.queryParams("user").isEmpty())
                    {
                        randomization.user_id = request.queryParams("user");
                    }
                    else
                    {
                        randomization.user_id = "0";
                    }
                    randomization.status = "PENDING";
                    HttpClient httpClient = HttpClientBuilder.create().build();
                    RequestConfig.Builder reqconfigconbuilder= RequestConfig.custom();
                    HttpHost proxyHost = new HttpHost("localhost", 8888, "http");
                    reqconfigconbuilder = reqconfigconbuilder.setProxy(proxyHost);
                    RequestConfig config = reqconfigconbuilder.build();
                    try {
                        HttpPost httpRequest = new HttpPost(API_URL + "randomizations");
                        StringEntity params = new StringEntity(gson.toJson(randomization));
                        httpRequest.addHeader("X-Authorization", API_KEY);
                        httpRequest.addHeader("Content-Type", "application/json");
                        httpRequest.setEntity(params);
                        httpRequest.setConfig(config);
                        HttpResponse httpResponse = httpClient.execute(httpRequest);
                    } catch (Exception ex) {
                    } finally {
                        // @Deprecated httpClient.getConnectionManager().shutdown();
                    }

                    JSONObject returnList = new JSONObject();
                    returnList.put("settings", settings);
                    returnList.put("generatedId", generatedId);
                    return new JSONObject()
                            .put("status", "200")
                            .put("data", returnList).toString();
                }
                else
                {
                    response.status(500);
                    return new JSONObject()
                            .put("status", "500")
                            .put("data", "Required parameters missing.").toString();
                }
            }
            catch (Exception ex)
            {
                response.status(500);
                return new JSONObject()
                        .put("status", 500)
                        .put("data", ex.toString()).toString();
            }

        });
        WorkerStart worker = new WorkerStart();
        ScheduledExecutorService schedular = Executors.newScheduledThreadPool(1);
        schedular.scheduleAtFixedRate(worker, 0,30, TimeUnit.SECONDS);

        return 1;
    }

    @Override
    public void run() {
        try
        {
            int activeThreads = ((ThreadPoolExecutor) executor).getActiveCount();
            System.out.println(activeThreads);
            if (activeThreads < 5)
            {

                HttpClient httpClient = HttpClientBuilder.create().build();
                RequestConfig.Builder reqconfigconbuilder= RequestConfig.custom();
                //This is just for testing
                HttpHost proxyHost = new HttpHost("localhost", 8888, "http");
                reqconfigconbuilder = reqconfigconbuilder.setProxy(proxyHost);
                RequestConfig config = reqconfigconbuilder.build();
                String body = "";
                try {
                    HttpGet httpRequest = new HttpGet(API_URL + "randomizations");
                    httpRequest.addHeader("X-Authorization", API_KEY);
                    httpRequest.addHeader("Content-Type", "application/json");
                    httpRequest.setConfig(config);
                    HttpResponse httpResponse = httpClient.execute(httpRequest);
                    body = EntityUtils.toString(httpResponse.getEntity());
                } catch (Exception ex) {
                } finally {
                    // @Deprecated httpClient.getConnectionManager().shutdown();
                }



                //The API endpoint will return an array of up to 5 pending randomizations - we need to loop through each randomization and start a worker with that randomization.
                ApiRandomizations[] randomizations = new Gson().fromJson(body, ApiRandomizations[].class);

                for (ApiRandomizations randomization : randomizations)
                {
                    Settings settings = new Gson().fromJson(randomization.settings, Settings.class);
                    Runnable worker = new RandomizationWorker(settings, Long.parseLong(randomization.seed), randomization.file_name, randomization.generated_id, false, null, false);
                    executor.execute(worker);
                }
            }
        }
        catch (Exception ex)
        {
            System.out.println(ex.toString());
        }
    }
}
